@import './my_bulma.scss';
@import '~react-tippy/dist/tippy.css';


.The-Persistence {
  background-image: url('/persistencetitle.jpg');
  background-repeat: no-repeat;
  height: 5vw;
  width: 10vw;
  display: block;
  margin: 0 auto;
  -webkit-filter: drop-shadow(5px 5px 5px rgb(0, 0, 0) );
  filter: drop-shadow(5px 10px 10px rgb(104, 104, 104));
  filter: drop-shadow(5px 10px 15px rgb(78, 101, 112));
}


.navbar-menu {
  color: rgb(0, 255, 200)
}
// gameboard image

.mission-board {
  background-image: url('/Boardtest.jpg');
  background-repeat: no-repeat;
  background-size: cover;
  -webkit-filter: drop-shadow(3px 3px 3px rgb(0, 0, 0) );
  border-radius: 2%;
}
// blue leather background
.backdrop-image {
  background-image: url('/Backdrop.jpg');
  background-repeat: no-repeat center center fixed;
  background-size: cover;
  min-height: 100%;
  min-width: 1024px;

  /* Set up proportionate scaling */
  width: 100%;
  height: auto;

  /* Set up positioning */
  position: fixed;
  top: 0;
  left: 0;
}

.RoundContainer {
  margin:0 auto;
  position: relative;
// is fluid
      margin-left: $gap;
      margin-right: $gap;
      max-width: none;
      width: auto;
}


.ChatContainer {
  margin:0 auto;
  position: relative;
// is fluid
      margin-left: $gap;
      margin-right: $gap;
      max-width: none;
      width: auto;

}


.missionDisplay {
  // width: 62vw;
  // margin-left: 0.5vw;
  margin-left: $gap;
  margin-right: $gap;
  max-width: none;
  width: auto;
}



.circles {
  border-radius: 50%;
  width: 5vw;
  height: 5vw;
  border: 7px outset rgba(131, 138, 139, 0.32);
//original hex value #838a8b
}

.playerImage {
    border-radius: "50%";
    height: "100px";
    width: "100px";
}

.hidden {
  visibility: hidden;
}

.glow {
    color: yellow;
    text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;
}

.voteTrack {
    padding-top: 40px;
    padding-bottom: 20px;
}

.historyIcon {
  display: absolute;
}

.tinyThumbRight {
    margin-left: 3px;
    margin-top: 9px;
    width: 30px
}

.tinyThumbLeft {
    margin-left: 3px;
    margin-right: 5px;
    width: 30px
}

.hero {
    margin: 0.5vw;
}

  .spy-glow {
    box-shadow: 0 0 64px #b30000;
  }

  .button-glow {
    box-shadow: 0 0 50px rgb(196, 166, 0);
  }

.cake {
    text-align: center;
    font-size: 7em;
    -webkit-transition: all 0.5s;
    -moz-transition: all 0.5s;
    transition: all 0.5s;
    -webkit-animation: neon3 1.5s ease-in-out infinite alternate;
    -moz-animation: neon3 1.5s ease-in-out infinite alternate;
    animation: neon3 1.5s ease-in-out infinite alternate;
    color: rgb(196, 166, 0);
  }

.nominated-spy-glow {
    -webkit-transition: all 0.5s;
    -moz-transition: all 0.5s;
    transition: all 0.5s;
    -webkit-animation: pulse-spy 1.5s ease-in-out infinite alternate;
    -moz-animation: pulse-spy 1.5s ease-in-out infinite alternate;
    animation: pulse-spy 1.5s ease-in-out infinite alternate;
  }

  @-webkit-keyframes pulse-spy {
  0% { box-shadow:0 0 64px #FD8300, inset 0 0 8px #FD8300; }
  50% { box-shadow:0 0 120px #FD8300, inset 0 0 14px #FD8300; }
  100% { box-shadow:0 0 32px #FD8300, inset 0 0 8px #FD8300; }
  }

.nominated-glow {
  -webkit-transition: all 0.5s;
  -moz-transition: all 0.5s;
  transition: all 0.5s;
  -webkit-animation: pulse 1.5s ease-in-out infinite alternate;
  -moz-animation: pulse 1.5s ease-in-out infinite alternate;
  animation: pulse 1.5s ease-in-out infinite alternate;
}

@-webkit-keyframes pulse {
0% { box-shadow:0 0 64px #DCC646, inset 0 0 8px #DCC646; }
50% { box-shadow:0 0 120px #DCC646, inset 0 0 14px #DCC646; }
100% { box-shadow:0 0 32px #DCC646, inset 0 0 8px #DCC646; }
}

  .statusIcon {
    width: 30px;
  }

  .spyIcon {
    width: 30px;
  }

  .persistancetitle {
    width: 500px;
    height: 80px;
  }

  .toolTipStatusIcon {
    width: 14px;
    margin-right: 2px;
    margin-top: 1px;
  }

  .playerToolTipStat {
    color: #daa520
  }

  //neon test end

  @-webkit-keyframes neon3 {
    from {
      text-shadow: 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #FFDD1B, 0 0 40px #FFDD1B, 0 0 70px #FFDD1B, 0 0 80px #FFDD1B, 0 0 100px #FFDD1B, 0 0 150px #FFDD1B;
    }
    to {
      text-shadow: 0 0 5px #fff, 0 0 10px #fff, 0 0 15px #FFDD1B, 0 0 20px #FFDD1B, 0 0 35px #FFDD1B, 0 0 40px #FFDD1B, 0 0 50px #FFDD1B, 0 0 75px #FFDD1B;
    }
  }
  @-moz-keyframes neon3 {
    from {
      text-shadow: 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #fff, 0 0 40px #FFDD1B, 0 0 70px #FFDD1B, 0 0 80px #FFDD1B, 0 0 100px #FFDD1B, 0 0 150px #FFDD1B;
    }
    to {
      text-shadow: 0 0 5px #fff, 0 0 10px #fff, 0 0 15px #fff, 0 0 20px #FFDD1B, 0 0 35px #FFDD1B, 0 0 40px #FFDD1B, 0 0 50px #FFDD1B, 0 0 75px #FFDD1B;
    }
  }

  @keyframes neon3 {
    from {
      text-shadow: 0 0 10px #fff, 0 0 20px #FFDD1B, 0 0 30px #FFDD1B, 0 0 40px #FFDD1B, 0 0 70px #FFDD1B, 0 0 80px #FFDD1B, 0 0 100px #FFDD1B, 0 0 150px #FFDD1B;
    }
    to {
      text-shadow: 0 0 5px #fff, 0 0 10px #FFDD1B, 0 0 15px #FFDD1B, 0 0 20px #FFDD1B, 0 0 35px #FFDD1B, 0 0 40px #FFDD1B, 0 0 50px #FFDD1B, 0 0 75px #FFDD1B;
    }
  }

.homeButton {
  margin: 3px
}

.voteScreen {
  width: 100vw;
  height: 80vh;
  position: absolute;
  top: 0;
  z-index: 50;
  background-color: goldenrod;
}

/*
  https://developer.mozilla.org/en/docs/Web/CSS/box-shadow
  box-shadow: [inset?] [top] [left] [blur] [size] [color];

  Tips:
    - We're setting all the blurs to 0 since we want a solid fill.
    - Add the inset keyword so the box-shadow is on the inside of the element
    - Animating the inset shadow on hover looks like the element is filling in from whatever side you specify ([top] and [left] accept negative values to become [bottom] and [right])
    - Multiple shadows can be stacked
    - If you're animating multiple shadows, be sure to keep the same number of shadows so the animation is smooth. Otherwise, you'll get something choppy.
*/

// Animate the size, inside



.raise:hover {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);
}

.raiseI:hover,:focus {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);
}

.raise-green:hover {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);
}

.raise-red:hover {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);
}

.raiseI-red:hover,:focus {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);
}

.raise-white:hover,:focus {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);
}

.raise-black:hover,:focus {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);

}
//=== Set button colors
// If you wonder why use Sass vars or CSS custom properties...
  // Make a map with the class names and matching colors
$colors: (
  fill: #a972cb,
  pulse: #ef6eae,
  close: #ff7f82,
  raise: #0059ff,
  raiseI: #0059ff,
  raise-white: white,
  raise-black: black,
  raise-green: #15661a,
  raise-red: #921911,
  raiseI-red: #921911,
  up: #e4cb58,
  slide: #8fc866,
  offset: #19bc8b
);

// Sass variables compile to a static string; CSS variables are dynamic and inherited
  // Loop through the map and set CSS custom properties using Sass variables
@each $button, $color in $colors {
  .#{$button} {
    --color: #{$color};
    --hover: #{adjust-hue($color, 0deg)};
  }
}

// Now every button will have different colors as set above. We get to use the same structure, only changing the custom properties.
button {
  color: var(--color);
  transition: 0.25s;

  &:hover,
  &:focus {
    border-color: var(--hover);
    color: #fff;
  }
}



//=== Pen styling, ignore


// Basic button styles
button {
  background: none;
  border: 2px solid;
  font: inherit;
  line-height: 1;
  margin: 0.5em;
  padding: 1em 2em;
}

h1 { font-weight: 400; }

code {
  color: #e4cb58;
  font: inherit;
}


.voteCheck {
  -webkit-box-shadow: 0 10px 6px -6px #777;
  -moz-box-shadow: 0 10px 6px -6px #777;
       box-shadow: 0 10px 6px -6px #777;
  height: 120px;
  color: var(--color);
  transition: 0.25s;
  border-radius: 15px;

  &:hover,
  &:focus {
    border-color: var(--hover);
    color: #fff;
  }
}

.voteCross {
  -webkit-box-shadow: 0 10px 6px -6px #777;
  -moz-box-shadow: 0 10px 6px -6px #777;
       box-shadow: 0 10px 6px -6px #777;
  height: 120px;
  color: var(--color);
  transition: 0.25s;
  border-radius: 15px;

  &:hover,
  &:focus {
    border-color: var(--hover);
    color: #fff;
  }
}

.announcement-text {
  color: #000;
}

.modal-color {
  background-color: grey;
}

.innerShadow {
  -moz-box-shadow:    inset 0 0 10px #000000;
  -webkit-box-shadow: inset 0 0 10px #000000;
  box-shadow:         inset 0 0 10px #000000;
}

.intentionAccept {
  -webkit-box-shadow: 0 10px 6px -6px #777;
  -moz-box-shadow: 0 10px 6px -6px #777;
       box-shadow: 0 10px 6px -6px #777;
  height: 150px;
  color: var(--color);
  transition: 0.25s;
  border-radius: 15px;

  &:hover,
  &:focus {
    border-color: var(--hover);
    color: #fff;
  }
}

.intentionReject {
  -webkit-box-shadow: 0 10px 6px -6px #777;
  -moz-box-shadow: 0 10px 6px -6px #777;
       box-shadow: 0 10px 6px -6px #777;
  height: 150px;
  color: var(--color);
  transition: 0.25s;
  border-radius: 15px;

  &:hover,
  &:focus {
    border-color: var(--hover);
    color: #fff;
  }
}

.no {
  border:none;
  height: 150px;
  outline: none;
  a:active,
a:focus {
    -moz-outline-style: none;
}
}

.nono {
  -webkit-filter: grayscale(100%);
       -moz-filter: grayscale(100%);
         -o-filter: grayscale(100%);
        -ms-filter: grayscale(100%);
            filter: grayscale(100%);
}


.tippy-popper {
  max-width: 100%;
}

.chatSubmit {
  width: 5%;
  font-size: 2em;
  padding: 0 0;
  text-align: center
}

.chatInput:focus  {
  outline: none;
  transform: none;
  border-color: black;
}

.chatInput {
  background: transparent;
  border: 1px solid black;
}

.chatWindow{
  overflow:hidden;

  ::-webkit-scrollbar {
    display: none;
  }
}
